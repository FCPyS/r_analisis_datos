# Manejo de datos: importación, selección y revisión

## Datos

Guarda en tu carpeta de datos, la información que está [acá](https://www.dropbox.com/scl/fo/42zy3owbokvfhdg4a9t78/AEPl06bBAvO6Du_zvk6EuVo?rlkey=t9f56pjt0w2nhfnn9otu1zxnm&dl=0) (ayer descargamos algunos archivos, agregué dos más)

## Paquetes

Vamos a llamar algunas paqueterías básicas para la práctica de hoy.

```{r}
if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(tidyverse,
               readr,
               readxl,
               writexl,
               haven, 
               magrittr,
               skimr,
               sjlabelled,
               foreign,
               janitor) #carga los paquetes necesarios para esta práctica
```

## Importación de datos

### Desde Excel

El paquete más compatible con RStudio es `{readxl}`. Como su nombre dice "lee" los archivos de excel

```{r 3}
ejemploxl <- readxl::read_excel("datos/ejemplo_xlsx.xlsx", sheet = "para_importar")

```

Como el nombre de paquete lo indica, sólo lee. Para "escribir" en este formato, recomiendo el paquete `{writexl}`. Lo instalamos anteriormente.

Si quisiéramos exportar un objeto a Excel, se hace de la siguiente forma:

```{r 5}
writexl::write_xlsx(ejemploxl, path = "Mi_Exportación.xlsx")
```

### Desde STATA y SPSS

Si bien también se puede realizar desde el paquete `{foreign}` Pero este no importa algunas características como las etiquetas y tampoco funciona con las versiones más nuevas de STATA. Vamos a instalar otro paquete, compatible con el mundo `{tidyverse}`.

Recuerda que no hay que instalarlo (viene adentro de `{tidyverse}`).

```{r}
concentradohogar <- haven::read_dta("datos/concentradohogar.dta")
```

!Importante, a R no le gustan los objetos con nombres que empiezan en números

El paquete haven sí exporta información.

```{r}
haven::write_dta(concentradohogar,
                 "datos/mi_exportación.dta",
                 version = 12)
```

Con SSPS es muy parecido. Dentro de `{haven}` hay una función específica para ello.

```{r}
concentradohogarr<- haven::read_sav("datos/concentradohogar.sav")

```

Para escribir

```{r}
haven::write_sav(concentradohogar , "mi_exportacion.sav")
```

Checa que en todas las exportaciones en los nombres hay que incluir la extensión del programa. Si quieres guardar en un lugar diferente al directorio del trabajo, hay que escribir toda la ruta dentro de la computadora.

### Desde archivos de texto y de una url

Desde el portal <https://datos.gob.mx/> tenemos acceso a directo a varias fuentes de información, al ser datos abiertos, los archivos de texto son muy comunes.

Leeremos parte de esa información, específicamente de las [proyecciones de CONAPO](https://datos.gob.mx/busca/dataset/proyecciones-de-la-poblacion-de-mexico-y-de-las-entidades-federativas-2020-2070)

```{r}
mig_inter_quin_proyecciones <- read.csv("https://conapo.segob.gob.mx/work/models/CONAPO/Datos_Abiertos/pry23/02_mig_inter_quinquen_proyecciones.csv")
names(mig_inter_quin_proyecciones)
```

```{r}
mig_inter_quin_proyecciones <- readr::read_csv("https://conapo.segob.gob.mx/work/models/CONAPO/Datos_Abiertos/pry23/02_mig_inter_quinquen_proyecciones.csv")
names(mig_inter_quin_proyecciones)
```


## Revisión de nuestro conjunto de datos

### con base

Vamos a revisar la base, brevemente la base

```{r}
class(concentradohogar) # tipo de objeto

names(concentradohogar) # lista las variables

head(concentradohogar) # muestra las primeras 6 líneas

table(concentradohogar$sexo_jefe) # un tabulado simple
```

### Revisión con `{skimr}`

Esto se puede tardar un poquito

```{r}
skimr::skim(concentradohogar)
```



## Un poquito de `{dplyr}` y limpieza

### Primero, los pipes

R utiliza dos pipes el nativo `|>` y el pipe que está en `{dplyr}` `%>%`. Algunas de las diferencias las puedes checar acá <https://eliocamp.github.io/codigo-r/2021/05/r-pipa-nativa/>

Aquí hay un *tuit*, o *post de x.com* que lo explica bien.

<https://x.com/ArthurWelle/status/1535429654760284161>

En estas prácticas utilizaremos el segundo, son muy parecidos y así esta instructora pueda reciclar algunos de sus códigos viejos. Pero funcionan igual:

```{r}

concentradohogar|> #pipe nativo, no necesita instalación
  head()
```

```{r}
concentradohogar %>%  #pipe de dplyr, necesita instalación de dplyr en tidyverse
  head()
```

### Limpieza de nombres con `{janitor}`

Este paso también nos permitirá enseñar otro *pipe* que está en el paquete `{magrittr}`.

Los nombres de una base de datos son los nombres de las columnas.

```{r}
names(concentradohogar)
names(ejemploxl)
```

Como vemos en las bases hay mayúsculas, caracteres especiales y demás. Esto lo podemos cambiar

```{r}
ejemploxl<-ejemploxl %>% 
  janitor::clean_names()

names(ejemploxl)
```

Si quisiéramos que la acción quedará en una sola operación, podemos usar un pipe diferente:

```{r}
concentradohogar %<>% 
  clean_names()

names(concentradohogar)
```


### Ojeando

```{r}
dplyr::glimpse(concentradohogar)
dplyr::glimpse(concentradohogar[,1:10]) # en corchete del lado derecho podemos ojear columnas 

```
### Selección de casos y de variables

Poco a poco vamos comprendiendo más la lógica de R. Hay varias "formas" de programar. Por lo que no te asustes si varios códigos llegan al mismo resultado

Para revisar el contenido de un data frame podemos usar, como lo hicimos anteriormente, el formato basededatos\$var o usar corchete, checa como estas cuatro formas tan el mismo resultado.

```{r}
x<-concentradohogar$ing_cor
x<-concentradohogar[["ing_cor"]]  # ¡Ojo con las comillas! 
x<-concentradohogar[,23]
x<-concentradohogar[,"ing_cor"]

```

Ahora, con el formato de dplyr podemos llegar a lo mismo

```{r}
x<-concentradohogar %>% 
  dplyr::select(ing_cor)
```

## "Subsetting"

Selección "inversa" O sea no "botar algo", es con el negativo. No funciona con todos los formatos

```{r}
x<-concentradohogar %>% 
  select(-ing_cor)

rm(x) #rm sólo bota objetos
```

Pero con los otros formatos podemos "asignar" valores adentro de un data.frame, y uno de eso valores puede ser "la nada""

```{r}
concentradohogar$ing_cor2<-concentradohogar$ing_cor
concentradohogar$ing_cor2<-NULL

concentradohogar %<>% 
  dplyr::mutate(ing_cor2=ing_cor) # crea o cambia variables

concentradohogar %<>% 
  dplyr::mutate(ing_cor2=NULL) # crea o cambia variables

```

De aquí viene esa cuesta en el aprendizaje; tenemos que comprender en qué forma programó el que hizo el paquete e incluso a veces cómo aprendió quién te está enseñando o el foro que estás leyendo.

Rara vez utilizamos una base de datos completa, y rara vez queremos hacer operaciones completas con ellas.

Vamos a pedir cosas más específicas y podemos seleccionar observaciones o filas. Como nuestra base de datos es muy grande, guardaremos el filtro o selección en un objeto.

```{r}
subset1<-concentradohogar[concentradohogar$ing_cor>4,]
```

También podemos seleccionar columnas

```{r}
subset2<- concentradohogar[, c("sexo_jefe", "edad_jefe", "ing_cor")]
```

podemos combinar los dos tipos de selección

```{r}
subset3<- concentradohogar[(concentradohogar$ing_cor>2000 & concentradohogar$sexo_jefe==1 ), c("sexo_jefe", "edad_jefe", "ing_cor")]
```

Con `{dplyr}`, podemos usar `dplyr::filter()` y `dplyr::select`

```{r}

subset4<-concentradohogar %>% 
  dplyr::filter(ing_cor>2000 & sexo_jefe==1) %>%
  dplyr::select(sexo_jefe, edad_jefe, ing_cor)
```


## Etiquetas y cómo usarlas

Podemos ver que los objetos *data.frame*

```{r}

class(concentradohogar$sexo_jefe)

```

¿Cómo etiquetamos?

1.  Creamos un vector de la etiqueta

2.  Convertimos la variable a numérica

3.  Usamos `dplyr::mutate()` y `sjlabelled:set_labels()`

```{r}
etiqueta_sex<-c("Hombre", "Mujer")

concentradohogar<-concentradohogar %>% 
  mutate(sexo_jefe=as_numeric(sexo_jefe)) %>% # para quitar el "string"
  sjlabelled::set_labels(sexo_jefe, labels=etiqueta_sex) 

```

Veamos hoy nuestra variable
```{r}
class(concentradohogar$sexo_jefe)
class(sjlabelled::as_label(concentradohogar$sexo_jefe))

```

```{r}
concentradohogar %>% 
  mutate(sexo_jefe=sjlabelled::as_label(sexo_jefe)) %>% 
  tabyl(sexo_jefe)
```

## Ejercicio

-   Escoja una base con la que usted esté trabajando. Impórtela
-   Replique la exploración de la práctica: incluya limpiar nombre, alguna revisión global y, opcionalmente, alguna selección de variables o casos de acuerdo a su interés
-   Utilice al menos un comando con `{dplyr}` para revisar algo
-   Adjunte un archivo con información de la base (para que yo verifique su importación.), así como el código en .R

Envíe al siguiente [formulario](https://forms.gle/kb416LtHPZxRZkSx5)

